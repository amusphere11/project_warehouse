version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: warehouse_postgres_prod
    environment:
      POSTGRES_USER: ${DB_USER:-warehouse_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_this_password}
      POSTGRES_DB: ${DB_NAME:-warehouse_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - warehouse_network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-warehouse_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: warehouse_redis_prod
    volumes:
      - redis_data:/data
    networks:
      - warehouse_network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_this_password}
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    image: warehouse-backend:latest
    container_name: warehouse_backend_prod
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USER:-warehouse_user}:${DB_PASSWORD:-change_this_password}@postgres:5432/${DB_NAME:-warehouse_db}
      REDIS_URL: redis://:${REDIS_PASSWORD:-change_this_password}@redis:6379
      PORT: 3000
      JWT_SECRET: ${JWT_SECRET:-please-change-this-secret-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - warehouse_network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend
  frontend:
    image: warehouse-frontend:latest
    container_name: warehouse_frontend_prod
    depends_on:
      - backend
    networks:
      - warehouse_network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: warehouse_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - warehouse_network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  warehouse_network:
    driver: bridge
